generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(cuid())
  username         String     @unique
  email            String     @unique
  password         String
  profilePhoto     String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  auctions         Auction[]
  bids             Bid[]
  cartItems        CartItem[]
  receivedMessages Message[]  @relation("ReceivedMessages")
  sentMessages     Message[]  @relation("SentMessages")
  orders           Order[]
  products         Product[]

  @@map("users")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  auctions Auction[]
  products Product[]

  @@map("categories")
}

model Product {
  id          String      @id @default(cuid())
  title       String
  description String
  price       Float
  image       String
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  categoryId  String
  cartItems   CartItem[]
  messages    Message[]
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("products")
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int     @default(1)
  userId    String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id          String      @id @default(cuid())
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  orderItems  OrderItem[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Message {
  id              String   @id @default(cuid())
  content         String
  senderId        String
  receiverId      String
  productId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isCounterOffer  Boolean  @default(false)
  isOffer         Boolean  @default(false)
  isOfferResponse Boolean  @default(false)
  offerAccepted   Boolean?
  offerAmount     Float?
  originalOfferId String?
  responded       Boolean  @default(false)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  receiver        User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender          User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Auction {
  id           String        @id @default(cuid())
  title        String
  description  String
  startingBid  Float
  reservePrice Float?
  startTime    DateTime
  endTime      DateTime
  status       AuctionStatus @default(SCHEDULED)
  image        String?
  categoryId   String
  userId       String
  winningBidId String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  category     Category      @relation(fields: [categoryId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  winningBid   Bid?          @relation("WinningBid", fields: [winningBidId], references: [id])
  bids         Bid[]
}

model Bid {
  id         String    @id @default(cuid())
  amount     Float
  auctionId  String
  userId     String
  status     BidStatus @default(ACTIVE)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  wonAuction Auction?  @relation("WinningBid")
  auction    Auction   @relation(fields: [auctionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum AuctionStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}

enum BidStatus {
  ACTIVE
  OUTBID
  WINNING
  WON
}
